<?xml version='1.0' standalone='yes'?>
<ng2project>
	<package name="tour-of-heroes" version="1.0">
		<title>Angular Quickstart Tour of Heroes</title>
		<description>This is a demostration of using ng2Kickoff using the files created during the official tutorial.</description>
		<copyright>Anthony Green, AVAS Technology and Google, Inc</copyright>
		<license>MIT</license>
	</package>
	<module name="app" selector="my-app" styles="true" templates="true">
		<traits>
			<trait name="promiseHandleError">
				<handleError type="function" access="private" args="error:any" return="Promise" return-generic="any">
					console.error('An error occurred', error); // for demo purposes only
					return Promise.reject(error.message || error);
				</handleError>
			</trait>
		</traits>
		<routes>
			<route path="" redirectTo="/dashboard" pathMatch="full"/>
			<route path="dashboard" component="DashboardComponent"/>
			<route path="detail/:id" component="HeroDetailComponent"/>
			<route path="heroes" component="HeroesComponent"/>
		</routes>
		<components styles="true" templates="true">
			<component name="app" selector="my-app" bootstrap="true">
				<decorator>
					<template>
						<h1>{{title}}</h1>
						    <nav>
						      <a routerLink="/dashboard" routerLinkActive="active">Dashboard</a>
						      <a routerLink="/heroes" routerLinkActive="active">Heroes</a>
						    </nav>
	    					<router-outlet></router-outlet>
					</template>
					<styles>
						h1 {
						  font-size: 1.2em;
						  color: #999;
						  margin-bottom: 0;
						}
						h2 {
						  font-size: 2em;
						  margin-top: 0;
						  padding-top: 0;
						}
						nav a {
						  padding: 5px 10px;
						  text-decoration: none;
						  margin-top: 10px;
						  display: inline-block;
						  background-color: #eee;
						  border-radius: 4px;
						}
						nav a:visited, a:link {
						  color: #607D8B;
						}
						nav a:hover {
						  color: #039be5;
						  background-color: #CFD8DC;
						}
						nav a.active {
						  color: #039be5;
						}
					</styles>
				</decorator>
				<class>
					<title type="string">Tour of Heroes</title>
				</class>
			</component>

			<component name="dashboard" selector="my-dashboard">
				<decorator>
					<template><![CDATA[
						<h3>Top Heroes</h3>
						<div class="grid grid-pad">
						  <a *ngFor="let hero of heroes"  [routerLink]="['/detail', hero.id]"  class="col-1-4">
						    <div class="module hero">
						      <h4>{{hero.name}}</h4>
						    </div>
						  </a>
						</div>
						<hero-search></hero-search>]]>
					</template>
					<styles><![CDATA[
						[class*='col-'] {
						  float: left;
						  padding-right: 20px;
						  padding-bottom: 20px;
						}
						[class*='col-']:last-of-type {
						  padding-right: 0;
						}
						a {
						  text-decoration: none;
						}
						*, *:after, *:before {
						  -webkit-box-sizing: border-box;
						  -moz-box-sizing: border-box;
						  box-sizing: border-box;
						}
						h3 {
						  text-align: center; margin-bottom: 0;
						}
						h4 {
						  position: relative;
						}
						.grid {
						  margin: 0;
						}
						.col-1-4 {
						  width: 25%;
						}
						.module {
						  padding: 20px;
						  text-align: center;
						  color: #eee;
						  max-height: 120px;
						  min-width: 120px;
						  background-color: #607D8B;
						  border-radius: 2px;
						}
						.module:hover {
						  background-color: #EEE;
						  cursor: pointer;
						  color: #607d8b;
						}
						.grid-pad {
						  padding: 10px 0;
						}
						.grid-pad > [class*='col-']:last-of-type {
						  padding-right: 20px;
						}
						@media (max-width: 600px) {
						  .module {
						    font-size: 10px;
						    max-height: 75px; }
						}
						@media (max-width: 1024px) {
						  .grid {
						    margin: 0;
						  }
						  .module {
						    min-width: 60px;
						  }
						}]]>
					</styles>
				</decorator>
				<class>
					<heroes type="Hero[]">[]</heroes>
					<constructor type="function" args="private heroService: HeroService"></constructor>
					<ngOnInit type="function" return="void">this.heroService.getHeroes().then(heroes => this.heroes = heroes.slice(1, 5));</ngOnInit>
				</class>
			</component>

			<component name="hero-detail" selector="my-hero-detail">
				<decorator>
					<template><![CDATA[
						<div *ngIf="hero">
						  <h2>{{hero.name}} details!</h2>
						  <div>
						    <label>id: </label>{{hero.id}}</div>
						  <div>
						    <label>name: </label>
						    <input [(ngModel)]="hero.name" placeholder="name" />
						   </div>
						  <button (click)="goBack()">Back</button>
						  <button (click)="save()">Save</button>
						</div>
						]]>
					</template>
					<styles><![CDATA[
						label {
						  display: inline-block;
						  width: 3em;
						  margin: .5em 0;
						  color: #607D8B;
						  font-weight: bold;
						}
						input {
						  height: 2em;
						  font-size: 1em;
						  padding-left: .4em;
						}
						button {
						  margin-top: 20px;
						  font-family: Arial;
						  background-color: #eee;
						  border: none;
						  padding: 5px 10px;
						  border-radius: 4px;
						  cursor: pointer; cursor: hand;
						}
						button:hover {
						  background-color: #cfd8dc;
						}
						button:disabled {
						  background-color: #eee;
						  color: #ccc; 
						  cursor: auto;
						}
						]]>
					</styles>
				</decorator>
				<class>
					<hero type="Hero"></hero>
					<constructor type="function" args="private heroService: HeroService, private route: ActivatedRoute, private location: Location"></constructor>
					<ngOnInit type="function" return="void">this.route.params.switchMap((params: Params) => this.heroService.getHero(+params['id'])).subscribe(hero => this.hero = hero);</ngOnInit>
					<save type="function" return="void">this.heroService.update(this.hero).then(() => this.goBack());</save>
					<goBack type="function" return="void">this.location.back();</goBack>
				</class>
			</component>

			<component name="heroes" selector="my-heroes">
				<decorator>
					<template><![CDATA[
						<h2>My Heroes</h2>
						<div>
						  <label>Hero name:</label> <input #heroName />
						  <button (click)="add(heroName.value); heroName.value=''">
						    Add
						  </button>
						</div>
						<ul class="heroes">
						  <li *ngFor="let hero of heroes" (click)="onSelect(hero)"
						      [class.selected]="hero === selectedHero">
						    <span class="badge">{{hero.id}}</span>
						    <span>{{hero.name}}</span>
						    <button class="delete"
						      (click)="delete(hero); $event.stopPropagation()">x</button>
						  </li>
						</ul>
						<div *ngIf="selectedHero">
						  <h2>
						    {{selectedHero.name | uppercase}} is my hero
						  </h2>
						  <button (click)="gotoDetail()">View Details</button>
						</div>
						]]>
					</template>
					<styles><![CDATA[
						.selected {
						  background-color: #CFD8DC !important;
						  color: white;
						}
						.heroes {
						  margin: 0 0 2em 0;
						  list-style-type: none;
						  padding: 0;
						  width: 15em;
						}
						.heroes li {
						  cursor: pointer;
						  position: relative;
						  left: 0;
						  background-color: #EEE;
						  margin: .5em;
						  padding: .3em 0;
						  height: 1.6em;
						  border-radius: 4px;
						}
						.heroes li:hover {
						  color: #607D8B;
						  background-color: #DDD;
						  left: .1em;
						}
						.heroes li.selected:hover {
						  background-color: #BBD8DC !important;
						  color: white;
						}
						.heroes .text {
						  position: relative;
						  top: -3px;
						}
						.heroes .badge {
						  display: inline-block;
						  font-size: small;
						  color: white;
						  padding: 0.8em 0.7em 0 0.7em;
						  background-color: #607D8B;
						  line-height: 1em;
						  position: relative;
						  left: -1px;
						  top: -4px;
						  height: 1.8em;
						  margin-right: .8em;
						  border-radius: 4px 0 0 4px;
						}
						button {
						  font-family: Arial;
						  background-color: #eee;
						  border: none;
						  padding: 5px 10px;
						  border-radius: 4px;
						  cursor: pointer;
						  cursor: hand;
						}
						button:hover {
						  background-color: #cfd8dc;
						}
						button.delete {
						  float:right;
						  margin-top: 2px;
						  margin-right: .8em;
						  background-color: gray !important;
						  color:white;
						}
						]]>
					</styles>
				</decorator>
				<class>
					<heroes type="Hero[]">[]</heroes>
					<selectedHero type="Hero">[]</selectedHero>
					<constructor type="function" args="private heroService: HeroService, private router: Router"></constructor>
					<getHeroes type="function" return="void">this.heroService.getHeroes().then(heroes => this.heroes = heroes);</getHeroes>
					<add type="function" args="name:string" return="void">
						name = name.trim();
						    if (!name) { return; }
						    this.heroService.create(name)
						      .then(hero => {
							this.heroes.push(hero);
							this.selectedHero = null;
						      });
					</add>
					<delete type="function" args="hero: Hero" return="void">
						this.heroService
						        .delete(hero.id)
						        .then(() => {
						          this.heroes = this.heroes.filter(h => h !== hero);
						          if (this.selectedHero === hero) { this.selectedHero = null; }
        					});
					</delete>
					<ngOnInit type="function" return="void">this.getHeroes();</ngOnInit>
					<onSelect type="function" args="hero: Hero" return="void">this.selectedHero = hero;</onSelect>
					<gotoDetail type="function" return="void">this.router.navigate(['/detail', this.selectedHero.id]);</gotoDetail>
				</class>
			</component>
			<component name="hero-serach" selector="hero-search">
				<decorator>
					<template><![CDATA[
						<div id="search-component">
						  <h4>Hero Search</h4>
						  <input #searchBox id="search-box" (keyup)="search(searchBox.value)" />
						  <div>
						    <div *ngFor="let hero of heroes | async"
						         (click)="gotoDetail(hero)" class="search-result" >
						      {{hero.name}}
						    </div>
						  </div>
						</div>
						]]>
					</template>
					<styles><![CDATA[
						.search-result{
						  border-bottom: 1px solid gray;
						  border-left: 1px solid gray;
						  border-right: 1px solid gray;
						  width:195px;
						  height: 20px;
						  padding: 5px;
						  background-color: white;
						  cursor: pointer;
						}
						
						#search-box{
						  width: 200px;
						  height: 20px;
						}
						]]>
					</styles>
					<providers>HeroSearchService</providers>
				</decorator>
				<class>
					<heroes type="Observable" type-generic="Hero[]"></heroes>
					<searchTerms access="private"><![CDATA[
						new Subject<string>()
						]]>
					</searchTerms>
					<constructor type="function" args="private heroSearchService: HeroSearchService, private router: Router"></constructor>

					<search type="function" args="term:string" return="void" comment="Push a search term into the observable stream.">this.searchTerms.next(term);</search>
					<ngOnInit type="function" return="void"><![CDATA[
						this.heroes = this.searchTerms
						      .debounceTime(300)        // wait for 300ms pause in events
						      .distinctUntilChanged()   // ignore if next search term is same as previous
						      .switchMap(term => term   // switch to new observable each time
							// return the http search observable
							? this.heroSearchService.search(term)
							// or the observable of empty heroes if no search term
							: Observable.of<Hero[]>([]))
						      .catch(error => {
							// TODO: real error handling
							console.log(error);
							return Observable.of<Hero[]>([]);
      						});
      						]]>
					</ngOnInit>
					<gotoDetail type="function" args="hero: Hero" return="void">let link = ['/detail', hero.id]; this.router.navigate(link);</gotoDetail>
				</class>
				<module src="rxjs/Observable">Observable</module>
				<module src="rxjs/Subject">Subject</module>
			</component>

		</components>
		<providers>
			<service name="hero">
				<headers access="private">new Headers({'Content-Type': 'application/json'})</headers>
				<heroesUrl access="private" type="string" comment="URL to web api">app/heroes</heroesUrl>
				<constructor type="function" args="private http: Http"></constructor>
				<getHeroes type="function" return="Promise" return-generic="Hero"><![CDATA[
					return this.http.get(this.heroesUrl)
				               .toPromise()
				               .then(response => response.json().data as Hero[])
               					.catch(this.handleError);
               				]]>	
				</getHeroes>
				<getHero type="function" args="id:number" return="Promise" return-generic="Hero">
					return this.getHeroes().then(heroes => heroes.find(hero => hero.id === id));
				</getHero>
				<delete type="function" args="id:number" return="Promise" return-generic="void">
				    const url = `${this.heroesUrl}/${id}`;
				    return this.http.delete(url, {headers: this.headers})
				      .toPromise()
				      .then(() => null)
				      .catch(this.handleError);
				</delete>
				<create type="function" args="name:string" return="Promise" return-generic="Hero">
				    return this.http
				      .post(this.heroesUrl, JSON.stringify({name: name}), {headers: this.headers})
				      .toPromise()
				      .then(res => res.json().data)
				      .catch(this.handleError);
				</create>
				<update type="function" args="hero:Hero" return="Promise" return-generic="Hero">
				    const url = `${this.heroesUrl}/${hero.id}`;
				    return this.http
				      .put(url, JSON.stringify(hero), {headers: this.headers})
				      .toPromise()
				      .then(() => hero)
				      .catch(this.handleError);
				</update>
				<trait name="promiseHandleError"/>
			</service>
			<service name="hero-search">
				<constructor type="function" args="private http: Http"></constructor>
				<search type="function" args="term:string" return="Observable" return-generic="Hero[]">
					return this.http
							.get(`app/heroes/?name=${term}`)
							.map((r: Response) => r.json().data as Hero[]);
				</search>
				<module src="rxjs">Observable</module>
			</service>
		</providers>
		<dataobjects>
			<object name="Hero">
				<id type="number"/>
				<name type="string"/>
			</object>

		</dataobjects>
		<children>
			<module src="@angular/platform-browser">BrowserModule</module>
			<module src="@angular/http">HttpModule</module>
			<module src="angular-in-memory-web-api">InMemoryWebApiModule</module>
			<module src="./in-memory-data.service">InMemoryDataService</module>
		</children>
	</module>
</ng2project>
